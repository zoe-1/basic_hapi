{CONTENTS}

[BasicGuide]

Introduction
A basic guide to starting, configuring, and developing hapijs applications.
Each step of the process is a commit in the git repository allowing you
to check out and view the code state at each step. 

Navigating the Guide 
This guide used zoetags to make ctags vim navigation through the project. 
Sorry no emacs ctags support here.  

-----------------------------------------------------------------------------
Contents
-----------------------------------------------------------------------------
Lesson-1  Basics hapijs modular structure
Lesson-2  Configure tls on api and webserver.
Lesson-3  Refactor configuration settings. 
Lesson-4  Adding hapijs views.



title 			Lesson-1  Develop a basic hapijs application.
checkout 		Lesson-1  
description
	Basic hapijs application that has two plugins each with one router.
	Illustrates hapijs modular organization.  There are two plugins in 
	the application. Plugin "one" contains the web servers index route. 
	And, plugin "two" contains a route to a sub domain named "boom". 
	There is one path in the subdomain which is index.  
	Additionally, this application builds two nodejs servers. 
	One, is to be web server and is called "web".  The other is to
	be a web service api and is called "api". This shows the unique power
	hapijs / nodejs offers the developer. 

	This is the cleanest modular structure I have ever seen for
	creating web applications and web apis. After you develop this 
	basic hapijs server I believe you will agree.  

project tree
	index.js 			-- 	start up servers web and api	
										This application has a web server and api.
	plugins-web		--  plugins to be used on web server stored here.
	plugins-api		--  plugins to be use on webserver api stored here.
	
	STRUCTURE
	plugins-web/ 								-- Directory to contain all web application plugins.
	plugins-web/registry.js			-- Configures all plugins in plugins-web directory
																 to be loaded into the web server. 
																 Plus, this module also has function to register
																 the plugins.
																 WPlugins.registry = json object registry list of plugins.
																 WPlugins.register = register all plugins in registry.
																 @todo add authentication strategies to routes.
																 
	plugins-web/one/one.js		  -- Displays the index page of the site.
																 other routes to be added later.
	plugins-web/two/two.js		  -- A plugin that is subdomain of the site.
																 boom.localhost is the subdomain.
							


title 			Lesson-2 Configure tls on api and webserver.
zoetag			[lesson_2]
description
	Web application and api have tls requirements. 
	1. Generate security_certificate 
	{GenerateSelfCert}
	https://devcenter.heroku.com/articles/ssl-certificate-self
	2. Load tls certs into configuration options.
	Make configuration file to store settings. 
	Put tls certs into configurations.
	3. Configure servers that use ssl to use tls options.
	4. Create api plugin using tls protocol named "base" to serve data  
     response when requested.
		 ./plugins-api/base
		 

	SOURCES: 
 		http://security.stackexchange.com/questions/5126/whats-the-difference-between-ssl-tls-and-https
		ssl vs tls

		http://nodejs.org/api/tls.html
		Docs on how node.js configures tls. 
		Their openssl example has problems.

		https://github.com/npm/newww/blob/master/config.js
		See how npm uses self signed tls.

		https://devcenter.heroku.com/articles/ssl-certificate-self
		Good example of creating self signed cert.

		http://nodejs.org/api/https.html#https_https_createserver_options_requestlistener
		node.js create server docs.


title 	Lesson-3  Refactor configuration settings. 
zoetag [lesson_3]
description
		The tsl transport security layer is configured and working.  
		However, our index.js file is messy and needs refactoring.  
		Refactor plan:
		1. Put tsl configurations into server configurations file.
			 ./config.js
		2. Load these configurations in the server.connection functions
			 rather than hard coding the configurations.


title 	Lesson-4  Adding hapijs views. 
zoetag [lesson_4]
description
		Configure plugin to have a prefix: './three'.
		Configure plugin to use handlebars, html views, and templates.
		Note: prefixes also work on subdomains 
		unless the subdomain has the same path then
		the subdomain's path will be executed. 
	 
